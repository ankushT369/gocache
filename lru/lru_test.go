//This test is generated by Deepseek
package lru

import (
        "testing"
)

func TestBasicPutGet(t *testing.T) {
        cache := NewLRUCache[string, int](2) // Specify string key and int value types

        cache.Put("a", 1)
        cache.Put("b", 2)

        if val, ok := cache.Get("a"); !ok || val != 1 {
                t.Errorf("expected 1, got %v, ok=%v", val, ok)
        }

        if val, ok := cache.Get("b"); !ok || val != 2 {
                t.Errorf("expected 2, got %v, ok=%v", val, ok)
        }
}

func TestUpdateValue(t *testing.T) {
        cache := NewLRUCache[string, int](2) // Specify string key and int value types

        cache.Put("a", 1)
        cache.Put("a", 42) // update existing key

        if val, ok := cache.Get("a"); !ok || val != 42 {
                t.Errorf("expected 42, got %v, ok=%v", val, ok)
        }

        if cache.Size() != 1 {
                t.Errorf("expected size=1 after update, got %d", cache.Size())
        }
}

func TestEviction(t *testing.T) {
        cache := NewLRUCache[string, int](2) // Capacity of 2

        cache.Put("a", 1)
        cache.Put("b", 2)
        cache.Put("c", 3) // should evict "a"

        if _, ok := cache.Get("a"); ok {
                t.Errorf("expected 'a' to be evicted")
        }

        if val, ok := cache.Get("b"); !ok || val != 2 {
                t.Errorf("expected 2, got %v, ok=%v", val, ok)
        }

        if val, ok := cache.Get("c"); !ok || val != 3 {
                t.Errorf("expected 3, got %v, ok=%v", val, ok)
        }
}

func TestZeroCapacity(t *testing.T) {
        cache := NewLRUCache[string, int](0) // Zero capacity

        cache.Put("a", 1)
        if cache.Size() != 0 {
                t.Errorf("expected size=0 for zero capacity cache, got %d", cache.Size())
        }

        if _, ok := cache.Get("a"); ok {
                t.Errorf("expected nothing to be stored in zero capacity cache")
        }
}
